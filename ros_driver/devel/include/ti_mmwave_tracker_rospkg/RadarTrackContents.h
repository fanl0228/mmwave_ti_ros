// Generated by gencpp from file ti_mmwave_tracker_rospkg/RadarTrackContents.msg
// DO NOT EDIT!


#ifndef TI_MMWAVE_TRACKER_ROSPKG_MESSAGE_RADARTRACKCONTENTS_H
#define TI_MMWAVE_TRACKER_ROSPKG_MESSAGE_RADARTRACKCONTENTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ti_mmwave_tracker_rospkg
{
template <class ContainerAllocator>
struct RadarTrackContents_
{
  typedef RadarTrackContents_<ContainerAllocator> Type;

  RadarTrackContents_()
    : header()
    , tid(0)
    , posx(0.0)
    , posy(0.0)
    , posz(0.0)
    , velx(0.0)
    , vely(0.0)
    , velz(0.0)
    , accx(0.0)
    , accy(0.0)
    , accz(0.0)  {
    }
  RadarTrackContents_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , tid(0)
    , posx(0.0)
    , posy(0.0)
    , posz(0.0)
    , velx(0.0)
    , vely(0.0)
    , velz(0.0)
    , accx(0.0)
    , accy(0.0)
    , accz(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _tid_type;
  _tid_type tid;

   typedef float _posx_type;
  _posx_type posx;

   typedef float _posy_type;
  _posy_type posy;

   typedef float _posz_type;
  _posz_type posz;

   typedef float _velx_type;
  _velx_type velx;

   typedef float _vely_type;
  _vely_type vely;

   typedef float _velz_type;
  _velz_type velz;

   typedef float _accx_type;
  _accx_type accx;

   typedef float _accy_type;
  _accy_type accy;

   typedef float _accz_type;
  _accz_type accz;





  typedef boost::shared_ptr< ::ti_mmwave_tracker_rospkg::RadarTrackContents_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ti_mmwave_tracker_rospkg::RadarTrackContents_<ContainerAllocator> const> ConstPtr;

}; // struct RadarTrackContents_

typedef ::ti_mmwave_tracker_rospkg::RadarTrackContents_<std::allocator<void> > RadarTrackContents;

typedef boost::shared_ptr< ::ti_mmwave_tracker_rospkg::RadarTrackContents > RadarTrackContentsPtr;
typedef boost::shared_ptr< ::ti_mmwave_tracker_rospkg::RadarTrackContents const> RadarTrackContentsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ti_mmwave_tracker_rospkg::RadarTrackContents_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ti_mmwave_tracker_rospkg::RadarTrackContents_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ti_mmwave_tracker_rospkg::RadarTrackContents_<ContainerAllocator1> & lhs, const ::ti_mmwave_tracker_rospkg::RadarTrackContents_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.tid == rhs.tid &&
    lhs.posx == rhs.posx &&
    lhs.posy == rhs.posy &&
    lhs.posz == rhs.posz &&
    lhs.velx == rhs.velx &&
    lhs.vely == rhs.vely &&
    lhs.velz == rhs.velz &&
    lhs.accx == rhs.accx &&
    lhs.accy == rhs.accy &&
    lhs.accz == rhs.accz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ti_mmwave_tracker_rospkg::RadarTrackContents_<ContainerAllocator1> & lhs, const ::ti_mmwave_tracker_rospkg::RadarTrackContents_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ti_mmwave_tracker_rospkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ti_mmwave_tracker_rospkg::RadarTrackContents_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ti_mmwave_tracker_rospkg::RadarTrackContents_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ti_mmwave_tracker_rospkg::RadarTrackContents_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ti_mmwave_tracker_rospkg::RadarTrackContents_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ti_mmwave_tracker_rospkg::RadarTrackContents_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ti_mmwave_tracker_rospkg::RadarTrackContents_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ti_mmwave_tracker_rospkg::RadarTrackContents_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3199e7a7c9d764018ec54a328692cdc1";
  }

  static const char* value(const ::ti_mmwave_tracker_rospkg::RadarTrackContents_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3199e7a7c9d76401ULL;
  static const uint64_t static_value2 = 0x8ec54a328692cdc1ULL;
};

template<class ContainerAllocator>
struct DataType< ::ti_mmwave_tracker_rospkg::RadarTrackContents_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ti_mmwave_tracker_rospkg/RadarTrackContents";
  }

  static const char* value(const ::ti_mmwave_tracker_rospkg::RadarTrackContents_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ti_mmwave_tracker_rospkg::RadarTrackContents_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint32 tid\n"
"float32 posx\n"
"float32 posy\n"
"float32 posz\n"
"float32 velx\n"
"float32 vely\n"
"float32 velz\n"
"float32 accx\n"
"float32 accy\n"
"float32 accz\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ti_mmwave_tracker_rospkg::RadarTrackContents_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ti_mmwave_tracker_rospkg::RadarTrackContents_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.tid);
      stream.next(m.posx);
      stream.next(m.posy);
      stream.next(m.posz);
      stream.next(m.velx);
      stream.next(m.vely);
      stream.next(m.velz);
      stream.next(m.accx);
      stream.next(m.accy);
      stream.next(m.accz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarTrackContents_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ti_mmwave_tracker_rospkg::RadarTrackContents_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ti_mmwave_tracker_rospkg::RadarTrackContents_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "tid: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.tid);
    s << indent << "posx: ";
    Printer<float>::stream(s, indent + "  ", v.posx);
    s << indent << "posy: ";
    Printer<float>::stream(s, indent + "  ", v.posy);
    s << indent << "posz: ";
    Printer<float>::stream(s, indent + "  ", v.posz);
    s << indent << "velx: ";
    Printer<float>::stream(s, indent + "  ", v.velx);
    s << indent << "vely: ";
    Printer<float>::stream(s, indent + "  ", v.vely);
    s << indent << "velz: ";
    Printer<float>::stream(s, indent + "  ", v.velz);
    s << indent << "accx: ";
    Printer<float>::stream(s, indent + "  ", v.accx);
    s << indent << "accy: ";
    Printer<float>::stream(s, indent + "  ", v.accy);
    s << indent << "accz: ";
    Printer<float>::stream(s, indent + "  ", v.accz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TI_MMWAVE_TRACKER_ROSPKG_MESSAGE_RADARTRACKCONTENTS_H
